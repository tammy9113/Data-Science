# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""
#Importing the dataset
#%%
import pandas as pd
data=pd.read_csv('C:/Users/RISHI/Desktop/XYZCorp_LendingData.csv',engine='python')
dc=pd.read_csv('C:/Users/RISHI/Desktop/pyton dataset info/final.csv',engine='python')
df=pd.DataFrame.copy(dc)
dfcopy=pd.DataFrame.copy(dc)
#%%
#Checking for the null values
#%%
data.head()
pd.options.display.max_rows = 999
data.isnull().sum()
datacopy=pd.DataFrame.copy(data)
dc=pd.DataFrame.copy(data)
c=0;
#dtaaset with almost 50% MV
for value in datacopy:
    if(datacopy[value].isnull().sum()>400000):
        print(value)
        c=c+1;
    
print(c)    
#%%

#dataset with no missing values
#%%
d=0;
for value in datacopy:
    if(datacopy[value].isnull().sum()==0):
        print(value)
        d=d+1;

print(d)
#%%
#the columns which we have to treat
#%%

f=0;
for value in datacopy:
    if(datacopy[value].isnull().sum()>0):
        if(datacopy[value].isnull().sum()<400000):
            print(value,':',datacopy[value].isnull().sum())
            f=f+1;
            

print(f)

#%%
#seeing the nature of the columns which are to be treated

datacopy.collections_12_mths_ex_med.describe(include=all)

collections_12_mths_ex_med


'emp_length' 'title' 'revol_util' 'last_pymnt_d' 'next_pymnt_d' 'last_credit_pull_d' 'collections_12_mths_ex_med' 'tot_coll_amt' 'tot_cur_bal' 'total_rev_hi_lim'
#%%



#%%

## numpy is used for creating fake data
import matplotlib.pyplot as plt
import numpy as np

# fake up some data
datacopy.tot_coll_amt.describe()
# basic plot
plt.boxplot(datacopy.loan_amnt,0,'gd')
plt.figure()
plt.boxplot(datacopy.installment, 0, 'gD')

plt.boxplot(datacopy.tot_coll_amt,0,'gd')


plt.boxplot(datacopy.collections_12_mths_ex_med,0,'gd')


#%%

#%%


dc=dc.drop(['desc','mths_since_last_delinq','mths_since_last_record','mths_since_last_major_derog','annual_inc_joint','dti_joint','verification_status_joint','open_acc_6m','open_il_6m','open_il_12m','open_il_24m','mths_since_rcnt_il','total_bal_il','il_util','open_rv_12m','open_rv_24m','max_bal_bc','all_util','inq_fi','total_cu_tl','inq_last_12m'], axis=1, inplace=True)

dc.next_pymnt_d.describe(include='all')


dc.last_credit_pull_d.describe(include='all')
dc.purpose.describe(include='all')

dc.title.describe(include='all')

datacopy.mths_since_last_delinq.describe(include='all')



#%%
##dropping some columns
#%%
dc.drop(['desc','mths_since_last_delinq','mths_since_last_record','mths_since_last_major_derog','annual_inc_joint','dti_joint','verification_status_joint','open_acc_6m','open_il_6m','open_il_12m','open_il_24m','mths_since_rcnt_il','total_bal_il','il_util','open_rv_12m','open_rv_24m','max_bal_bc','all_util','inq_fi','total_cu_tl','inq_last_12m'], axis=1, inplace=True, errors ='ignore')
columns=['desc','mths_since_last_delinq','mths_since_last_record','mths_since_last_major_derog','annual_inc_joint','dti_joint','verification_status_joint','open_acc_6m','open_il_6m','open_il_12m','open_il_24m','mths_since_rcnt_il','total_bal_il','il_util','open_rv_12m','open_rv_24m','max_bal_bc','all_util','inq_fi','total_cu_tl','inq_last_12m']
for value in columns:
       print(value,':',data[value].isnull().sum())


#%%
       
       
#%%
newDF = pd.DataFrame()

for value in['mths_since_last_delinq']:
    datacopy[value].replace(['?'],[9999],inplace=True)

val=1;
while val<=855969:
       if(datacopy.mths_since_last_delinq>1):
              newDF.delinq=datacopy.mths_since_last_delinq
              newDF.default=datacopy.default_ind
       value=value+1
#%%
       #some unnecessary columns
#%%
dc.drop(['id','member_id','loan_amnt','policy_code','pymnt_plan','zip_code','title'],axis = 1,inplace = True)
remaining=list(dc)


#%%       
#%%
for value in remaining:
       if(dc[value].isnull().sum()>0):
              print(value," :",dc[value].isnull().sum())
       


#%%
              #correlation betn famnt famnt_inv is high therfoer drop 1 of them
#%%
       dc.head()
       plt.matshow(dc.corr())
       print(dc.corr())
#%%       
    #REVOL UTIL   
#%%
       
print(dc.revol_util.describe(include = 'all')[1])
mean = dc.revol_util.mean()
mean
dc['revol_util'].fillna(mean,inplace = True)
print(dc.revol_util.isnull().sum())
#%%

       #tot_coll_amt  
#%%
  print(dc.tot_coll_amt.isnull().sum())     
dc.tot_coll_amt.describe(include = 'all')
dc.tot_coll_amt.fillna(0,inplace = True)
dc.tot_coll_amt[dc.tot_coll_amt>0] = 1
#%%
       #tot_cur_bal       
#%%
       
       dc.tot_cur_bal.describe(include = 'all')
dc.tot_cur_bal.value_counts()
Bal_median = dc.tot_cur_bal.median()
Bal_median
dc['tot_cur_bal'].fillna(Bal_median,inplace = True)
#%%



#%%
dc.drop(['funded_amnt_inv','grade','out_prncp_inv','total_pymnt_inv'], axis=1, inplace=True, errors ='ignore')

dc.drop(dc.columns[0], axis=1,inplace=True,errors='ignore')
#%%
import sklearn as sk
from sklearn.covariance import EllipticEnvelope
outlier = EllipticEnvelope(contamination=0.1)
outlier.fit(dc.funded_amnt)
prediction1 = outlier.predict(dc.funded_amnt)
plt.boxplot(dc.funded_amnt,0,'gd')
plt.boxplot(dc.int_rate,0,'gd')
i=0
k=0
for val in dc.int_rate:
       if(val >25):
              k=k+1
              
       i=i+1       
print(k)
#%%
#outliers in the intrest       
#%%

q1,q3,q95= np.percentile(dc.int_rate,[25,75,95])
iqr=q3-q1

up=q3+1.5*iqr
up
q95
#here we didnt do anything

#%%
funded amnt
#%%
plt.boxplot(dc.funded_amnt,0,'gd')
#no outliers were found
#%%
installment
#%%
plt.boxplot(dc.installment,0,'gd')
q1,q3,q95 = np.percentile(dc.installment,[25,75,95])
iqr=q3-q1
q95
up=q3+1.5*iqr
up
k=0
for val in dc.installment:
       if(val >1038):
              k=k+1
k
#we will perform binning
df.installment.value_counts()
b0=[15.69 , 260.55 , 382.55 , 571.56 , 1038. , 1200. , 1445.46]
df.installment=pd.cut(df.installment,b0)

#%%
annual income
#%%
plt.boxplot(dc.annual_inc,0,'gd')
q1,q3,q85,q95 = np.percentile(dc.annual_inc,[25,75,85,95])
iqr=q3-q1
q3+1.5*iqr
q95
q1
dc.annual_inc.describe(include='all')
k=0
for val in dc.annual_inc:
       if(val >157500):
              k=k+1
k
q85

# we will perform binning
bi=[  0. , 20000. ,  45000.,   65000. ,   90000.,  109000. , 500000. , 9500000.]


pd.cut(dfcopy.annual_inc,bi).head()
df.annual_inc=pd.cut(df.annual_inc,bi)
df.annual_inc.describe()
#%%
dti
#%%
plt.boxplot(dc.dti,0,'gd')
dc.dti.describe(include='all')
q1,q3 = np.percentile(dc.dti,[25,75])
iqr=q3-q1
q3+1.5*iqr
q1
k=0
for val in dc.dti:
     if(val >41.92999):
           k=k+1
k

# here we keep it as it is

#%%
revol_bal            less is good score
#%%
plt.boxplot(dc.revol_bal,0,'gd')
dc.revol_bal.describe(include='all')
q1,q3,q95 = np.percentile(dc.revol_bal,[25,75,95])
iqr=q3-q1
q3+1.5*iqr
q95
k=0
for val in dc.revol_bal:
      if(val >42439):
            k=k+1
k
# capping is done
df.revol_bal[dc.revol_bal>42439]=42439
df.revol_bal.describe(include='all')
#%%
revol_util           less is good score
#%%
plt.boxplot(dc.revol_util,0,'gd')
dc.revol_util.describe(include='all')
q1,q3,q95 = np.percentile(dc.revol_util,[25,75,95])
iqr=q3-q1
q3+1.5*iqr
q95
k=0
for val in dc.revol_util:
       if(val >127.35):
              k=k+1
k

#capping can be done but no of outliers are less so we can leave it
#%%
tot_acc
#%%
plt.boxplot(dc.total_acc,0,'gd')
dc.total_acc.describe(include='all')
q1,q3,q95 = np.percentile(dc.total_acc,[25,75,95])
iqr=q3-q1
q3+1.5*iqr
q95
k=0
for val in dc.total_acc:
       if(val >54.5):
              k=k+1
k
#capping is done
df.total_acc[df.total_acc>54.5]=54.5

#%%
total_PYMNT
#%%
plt.boxplot(dc.total_pymnt,0,'gd')
dc.total_pymnt.describe(include='all')
q1,q3,q85,q95 = np.percentile(dc.total_pymnt,[25,75,85,95])
iqr=q3-q1
q3+1.5*iqr
q95
q85
k=0
for val in dc.total_pymnt:
       if(val >23907.47):
              k=k+1
k  
#binning is done  
bi1=[0. , 1969. , 4976.16 , 10744.803650 , 15029.91 , 24209.78 , 57777.58]         
df.total_pymnt=pd.cut(df.total_pymnt,bi1)
df.total_pymnt.head()
#%%
TOTAL_REC_PRNCP
#%%
plt.boxplot(dc.total_rec_prncp,0,'gd')
dc.total_rec_prncp.describe(include='all')
q1,q3,q85,q95 = np.percentile(dc.total_rec_prncp,[25,75,85,95])
iqr=q3-q1
q3+1.5*iqr
q95
q85
k=0
for val in dc.total_rec_prncp:
       if(val >18140.075):
              k=k+1
k 
#binning is done
bi2=[0. , 1239. , 3286.9 , 8000. , 12000. , 20000., 35000.] 
df.total_rec_prncp=pd.cut(df.total_rec_prncp,bi2)
df.total_rec_prncp.describe()
#%%
TOTAL_REC_INT
#%%
plt.boxplot(dc.total_rec_int,0,'gd')
dc.total_rec_int.describe(include='all')
q1,q3,q95,q85,q98 = np.percentile(dc.total_rec_int,[25,75,95,85,98])
iqr=q3-q1
q3+1.5*iqr
q95
q85
k=0
for val in dc.total_rec_int:
       if(val >4908.045):
              k=k+1
k 
bi3=[0. , 451.27 , 1076.92 , 2234. , 3201.6 , 5868. , 10000. , 24205.63]
df.total_rec_int=pd.cut(df.total_rec_int,bi3)
#%%
tot_cur_bal
#%%
plt.boxplot(dc.tot_cur_bal,0,'gd')
dc.tot_cur_bal.describe(include='all')
q1,q3,q85,q95,q98= np.percentile(dc.tot_cur_bal,[25,75,85,95,98])
iqr=q3-q1
q3+1.5*iqr
q85
q95
q98
k=0
for val in dc.tot_cur_bal:
       if(val >442557.5):
              k=k+1
k
bi4=[0. , 32250. , 81008.5 , 196373. , 269227. , 414677.56 , 539255.97 , 1000000. , 3000000. , 8000078.]
df.tot_cur_bal=pd.cut(df.tot_cur_bal,bi4)



#%%
total_rev_hi_lim
#%%
plt.boxplot(dc.total_rev_hi_lim,0,'gd')
dc.total_rev_hi_lim.describe(include='all')
q1,q3,q95 = np.percentile(dc.total_rev_hi_lim,[25,75,95])
iqr=q3-q1
q3+1.5*iqr
q95
k=0
for val in dc.total_rev_hi_lim:
       if(val >72875.0):
              k=k+1
k

df.total_rev_hi_lim.value_counts()
bi5=[0. , 14750. , 23800. , 38000. , 50100. , 72875. , 147200. , 400000. , 9999999.]
df.tot_rev_hi_lim=pd.cut(df.tot_rev_hi_lim,bi5)
#%%
